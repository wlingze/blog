(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{498:function(t,a,v){"use strict";v.r(a);var _=v(31),e=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"lexical-analysis"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#lexical-analysis"}},[t._v("#")]),t._v(" lexical analysis")]),t._v(" "),v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#综述"}},[t._v("综述")]),v("ul",[v("li",[v("a",{attrs:{href:"#token"}},[t._v("token")])])])]),v("li",[v("a",{attrs:{href:"#语法分析的实现"}},[t._v("语法分析的实现")]),v("ul",[v("li",[v("a",{attrs:{href:"#线性扫描"}},[t._v("线性扫描")])]),v("li",[v("a",{attrs:{href:"#正则匹配"}},[t._v("正则匹配")])]),v("li",[v("a",{attrs:{href:"#对比"}},[t._v("对比")])])])]),v("li",[v("a",{attrs:{href:"#语言和编译的定义"}},[t._v("语言和编译的定义")]),v("ul",[v("li",[v("a",{attrs:{href:"#overview"}},[t._v("overview")])]),v("li",[v("a",{attrs:{href:"#fa图"}},[t._v("FA图")])]),v("li",[v("a",{attrs:{href:"#nfa-dfa"}},[t._v("NFA & DFA")])]),v("li",[v("a",{attrs:{href:"#epsilon-moves"}},[t._v("epsilon moves")])]),v("li",[v("a",{attrs:{href:"#fa的执行"}},[t._v("FA的执行")])]),v("li",[v("a",{attrs:{href:"#nfa-vs-dfa"}},[t._v("NFA vs DFA")])])])]),v("li",[v("a",{attrs:{href:"#从正则表达式转化成有限状态机"}},[t._v("从正则表达式转化成有限状态机")]),v("ul",[v("li",[v("a",{attrs:{href:"#正则到nfa"}},[t._v("正则到NFA")])]),v("li",[v("a",{attrs:{href:"#e-closure"}},[t._v("e-closure")])]),v("li",[v("a",{attrs:{href:"#从nfa到dfa"}},[t._v("从NFA到DFA")])]),v("li",[v("a",{attrs:{href:"#table-driven-dfa的实现"}},[t._v("Table-driven: DFA的实现")])])])]),v("li",[v("a",{attrs:{href:"#对于实现而言的问题"}},[t._v("对于实现而言的问题")]),v("ul",[v("li",[v("a",{attrs:{href:"#代码位置隐含"}},[t._v("代码位置隐含")])]),v("li",[v("a",{attrs:{href:"#switch-case"}},[t._v("switch-case")])]),v("li",[v("a",{attrs:{href:"#table-based"}},[t._v("table-based")])]),v("li",[v("a",{attrs:{href:"#比较"}},[t._v("比较")])])])])])]),v("p"),t._v(" "),v("h2",{attrs:{id:"综述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#综述"}},[t._v("#")]),t._v(" 综述")]),t._v(" "),v("p",[t._v("词法分析是编译过程的第一步，主要是从输入的字符串识别出token，")]),t._v(" "),v("h3",{attrs:{id:"token"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[t._v("#")]),t._v(" token")]),t._v(" "),v("p",[t._v("一个token对应句子不可再分割的一串字符串，类似英语单词， 一个token class对应一个字符串。")]),t._v(" "),v("p",[t._v("常见的token如：")]),t._v(" "),v("ul",[v("li",[t._v("标识符， 变量名、函数名、类名等。")]),t._v(" "),v("li",[t._v("常数")]),t._v(" "),v("li",[t._v("关键字")]),t._v(" "),v("li",[t._v("....")])]),t._v(" "),v("p",[t._v("词法分析的设计：")]),t._v(" "),v("ul",[v("li",[t._v("定义有限个数的token")]),t._v(" "),v("li",[t._v("设置对于各个token对应的字符串")])]),t._v(" "),v("p",[t._v("一般一个token由两部分组成：")]),t._v(" "),v("ul",[v("li",[t._v("一个特殊的字符串表示token")]),t._v(" "),v("li",[t._v("词素 lexeme， 即这个token表示对象的意义(数值)。")])]),t._v(" "),v("p",[t._v("词法分析器产生的就是一对 "),v("code",[t._v("token-lexeme")]),t._v(" 数据。")]),t._v(" "),v("blockquote",[v("p",[t._v("当然可能还有行号文件名等报错信息。")])]),t._v(" "),v("h2",{attrs:{id:"语法分析的实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#语法分析的实现"}},[t._v("#")]),t._v(" 语法分析的实现")]),t._v(" "),v("h3",{attrs:{id:"线性扫描"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线性扫描"}},[t._v("#")]),t._v(" 线性扫描")]),t._v(" "),v("p",[t._v("就是直接从左向右依次跑过来，遇到字符以后进行初步判断，然后继续向下。。")]),t._v(" "),v("p",[t._v("这种处理方式适合token不多而且不复杂的情况，实现起来比较简单，")]),t._v(" "),v("p",[t._v("线性扫描会容易遇到的问题就是在很多情况下需要进行向前的试探， 因为可能很多数值最开始是一样的，")]),t._v(" "),v("p",[t._v("一个比较简单的线性扫描器的实现就是json parser， 直接一次跑完即可， 遇到"),v("code",[t._v("{")]),t._v("则认为是object， 遇到"),v("code",[t._v('"')]),t._v("认为是string， 但是对于false\\true等需要进行往后几个字符的试探，才能判断具体是哪个。")]),t._v(" "),v("h3",{attrs:{id:"正则匹配"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#正则匹配"}},[t._v("#")]),t._v(" 正则匹配")]),t._v(" "),v("p",[t._v("一些表示符:")]),t._v(" "),v("ul",[v("li",[t._v("union 表示或\n"),v("ul",[v("li",[t._v("A+B = A|B")])])]),t._v(" "),v("li",[t._v("Range:\n"),v("ul",[v("li",[t._v("'a'+'b'+...+'z' = [a-z]")])])]),t._v(" "),v("li",[t._v("excluded range\n"),v("ul",[v("li",[t._v("Complement of [a-z] = "),v("code",[t._v("[^a-z]")])])])]),t._v(" "),v("li",[v("code",[t._v("*")]),t._v(" 匹配0-多次")]),t._v(" "),v("li",[v("code",[t._v("?")]),t._v("匹配0/1次")]),t._v(" "),v("li",[v("code",[t._v("+")]),t._v("匹配1-多次")])]),t._v(" "),v("h4",{attrs:{id:"实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),v("ul",[v("li",[t._v("对每个token编写对应的正则语法。")]),t._v(" "),v("li",[t._v("集合R， 包含所有token对应的正则")]),t._v(" "),v("li",[t._v("输入: x1--xn, 判断"),v("code",[t._v("x1--xi 是否属于 R")]),t._v(",")]),t._v(" "),v("li",[t._v("如果属于的话，我们将得到对应的Ri， 即对应的token，")]),t._v(" "),v("li",[t._v("移除x1--xi， 回到第三部继续判断，直到结束。")])]),t._v(" "),v("h4",{attrs:{id:"歧义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#歧义"}},[t._v("#")]),t._v(" 歧义")]),t._v(" "),v("p",[t._v("可能出现的问题：")]),t._v(" "),v("ul",[v("li",[t._v("同时命中\n"),v("ul",[v("li",[t._v("则选择长度最大的")])])]),t._v(" "),v("li",[t._v("同时命中+长度一致\n"),v("ul",[v("li",[t._v("则按照定义表达式的先后顺序，选择先定义的。")])])])]),t._v(" "),v("h4",{attrs:{id:"错误处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[t._v("#")]),t._v(" 错误处理")]),t._v(" "),v("p",[t._v("如果出现了不可被识别的输入，")]),t._v(" "),v("p",[t._v("在最后设置一个所有错误字符串的定义，并进行报错，")]),t._v(" "),v("h3",{attrs:{id:"对比"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对比"}},[t._v("#")]),t._v(" 对比")]),t._v(" "),v("p",[t._v("输入是依次的，即一个个字符，")]),t._v(" "),v("p",[t._v("在线性扫描器中，从开始输入，随着输入的继续会尝试判断选择token， 这个过程会比较繁琐，而且实现后不好拓展， 在某些情况下还要进行回退/前瞻等操作。")]),t._v(" "),v("p",[t._v("在正则匹配的实现中，输入以后会依次选择每个token对应的表达式，并判断是否命中，最后整理匹配到的表达式，并按照最长和优先定义的方案进行选择，然后返回对应表达式，这种方案有利于拓展。")]),t._v(" "),v("h2",{attrs:{id:"语言和编译的定义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#语言和编译的定义"}},[t._v("#")]),t._v(" 语言和编译的定义")]),t._v(" "),v("p",[t._v("首先， 编译原理和语言学的理论基础是集合论。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("字母表 ∑")]),t._v(" "),v("ul",[v("li",[t._v("字母表计时一个有限元素的集合")]),t._v(" "),v("li",[t._v("其中的每个元素称为"),v("strong",[t._v("符号")])])])]),t._v(" "),v("li",[v("p",[t._v("∑上的句子 s sentences")]),t._v(" "),v("ul",[v("li",[t._v("句子就是一串符号， 其中的每一个符号都是属于∑的， 句子用s表示\n"),v("ul",[v("li",[t._v("句子可以看作符号的集合，且句子是字母表的子集。")])])])])]),t._v(" "),v("li",[v("p",[t._v("𝜺 epsilon, 空句子")]),t._v(" "),v("ul",[v("li",[t._v("表示没有任何符号的句子, epsilon, 空句子也是一个句子。这个其实是集合的空集")])])]),t._v(" "),v("li",[v("p",[t._v("语言 L language")]),t._v(" "),v("ul",[v("li",[t._v("一个语言就是句子合集，任何一个句子集合都可以称为语言。")])])]),t._v(" "),v("li",[v("p",[t._v("编译 compile")]),t._v(" "),v("ul",[v("li",[t._v("给定两个语言， Ls, Lo, 和一个句子ss, 判断ss是否属于Ls, 并在Lo中找到句子so， 保证so和ss意义相同。")])])])]),t._v(" "),v("h1",{attrs:{id:"finite-automata"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#finite-automata"}},[t._v("#")]),t._v(" finite automata")]),t._v(" "),v("p",[t._v("有限状态机， 正则就是基于有限状态机实现的。")]),t._v(" "),v("h3",{attrs:{id:"overview"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" overview")]),t._v(" "),v("p",[t._v("有限状态机包含一下五个部分：")]),t._v(" "),v("ul",[v("li",[t._v("输入符号表，∑，")]),t._v(" "),v("li",[t._v("状态集合 S")]),t._v(" "),v("li",[t._v("起始状态 n")]),t._v(" "),v("li",[t._v("终止状态 接受状态 F，")]),t._v(" "),v("li",[t._v("转移函数")])]),t._v(" "),v("p",[t._v("有限状态机的运行：")]),t._v(" "),v("ul",[v("li",[t._v("一开始在起始状态n，")]),t._v(" "),v("li",[t._v("不断的读取数据，并随着输入进行状态变化，")]),t._v(" "),v("li",[t._v("如果最后的状态为接受状态， 那么表示接受本次输入。")]),t._v(" "),v("li",[t._v("如果最后状态不是接受状态，那么表示拒接本次输入。")])]),t._v(" "),v("h3",{attrs:{id:"fa图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#fa图"}},[t._v("#")]),t._v(" FA图")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/02/10/8o73cvJpuFGtwnC.png",alt:"image.png"}})]),t._v(" "),v("h3",{attrs:{id:"nfa-dfa"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nfa-dfa"}},[t._v("#")]),t._v(" NFA & DFA")]),t._v(" "),v("p",[t._v("Deterministic Finite Automata")]),t._v(" "),v("p",[t._v("确定状态有限状态机")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("对于每一次输入都会有一次状态改变，")])]),t._v(" "),v("li",[v("p",[t._v("没有epsilon-moves")])])]),t._v(" "),v("p",[t._v("Nodeterministic Finite Automata")]),t._v(" "),v("p",[t._v("不确定状态有限状态机，")]),t._v(" "),v("ul",[v("li",[t._v("对于每次输入都可以有0、1、多次状态转换，")]),t._v(" "),v("li",[t._v("可以epsilon-moves")])]),t._v(" "),v("h3",{attrs:{id:"epsilon-moves"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#epsilon-moves"}},[t._v("#")]),t._v(" epsilon moves")]),t._v(" "),v("p",[t._v("一种特殊的状态转换，只存在于NFA中，是指不接收任何符号，可以直接进行状态切换，")]),t._v(" "),v("blockquote",[v("p",[t._v("epsilon是一个特殊的句子，表示没有任何符号的句子 (空集)")])]),t._v(" "),v("h3",{attrs:{id:"fa的执行"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#fa的执行"}},[t._v("#")]),t._v(" FA的执行")]),t._v(" "),v("p",[t._v("在FA图中， DFA每次输入只能进行一个路径。")]),t._v(" "),v("ul",[v("li",[t._v("由输入决定其复杂程度")])]),t._v(" "),v("p",[t._v("在NFA中， 可以选择：")]),t._v(" "),v("ul",[v("li",[t._v("是否进行epsilon-moves")]),t._v(" "),v("li",[t._v("选择某一次输入对应的多个转换中的哪个\n"),v("ul",[v("li",[t._v("NFA会尽可能选择可以到达终结状态的路径")])])])]),t._v(" "),v("h3",{attrs:{id:"nfa-vs-dfa"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nfa-vs-dfa"}},[t._v("#")]),t._v(" NFA vs DFA")]),t._v(" "),v("p",[t._v("在表示同样的正则表达式时，")]),t._v(" "),v("ul",[v("li",[t._v("DFA运行的更快速\n"),v("ul",[v("li",[t._v("因为不需要进行路径选择")])])]),t._v(" "),v("li",[t._v("NFA更加简洁\n"),v("ul",[v("li",[t._v("DFA可以指数级别的大于NFA")])])])]),t._v(" "),v("h2",{attrs:{id:"从正则表达式转化成有限状态机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#从正则表达式转化成有限状态机"}},[t._v("#")]),t._v(" 从正则表达式转化成有限状态机")]),t._v(" "),v("p",[t._v("简述")]),t._v(" "),v("ul",[v("li",[t._v("语法描述")]),t._v(" "),v("li",[t._v("正则表达式")]),t._v(" "),v("li",[t._v("NFA")]),t._v(" "),v("li",[t._v("DFA")]),t._v(" "),v("li",[t._v("表驱动实现的DFA")])]),t._v(" "),v("h3",{attrs:{id:"正则到nfa"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#正则到nfa"}},[t._v("#")]),t._v(" 正则到NFA")]),t._v(" "),v("p",[t._v("其实是一套直接对应的转换了")]),t._v(" "),v("p",[t._v("首先对于一个表达是M， 我们写为一个大圆弧形式")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/02/10/Ut1GhEnDPK5XeLp.png",alt:"image.png"}})]),t._v(" "),v("p",[t._v("然后对于正则的几种表达式， 都可以进行转换，并通过上述的M结构进行嵌套使用")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/02/10/hvUbsx71pAPDWFR.png",alt:"image-20220210205544857"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/02/10/zyERKgiWaJxrhfp.png",alt:"image-20220210205554613"}})]),t._v(" "),v("h3",{attrs:{id:"e-closure"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#e-closure"}},[t._v("#")]),t._v(" e-closure")]),t._v(" "),v("p",[t._v("epsilon闭包，")]),t._v(" "),v("p",[v("code",[t._v("e-closure(P)")]),t._v("指从P开始， 可以通过e-moves到达的状态的集合。")]),t._v(" "),v("h3",{attrs:{id:"从nfa到dfa"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#从nfa到dfa"}},[t._v("#")]),t._v(" 从NFA到DFA")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("确定DFA起始状态")]),t._v(" "),v("ul",[v("li",[t._v("E-closure(NFA-start-state) 作为DFA的起始状态")])])]),t._v(" "),v("li",[v("p",[t._v("然后开始增加 S -a-> S'的变换，")]),t._v(" "),v("ul",[v("li",[t._v("S'是S中的每个状态接收到a元素后变化的集合，这个结果也包含可以通过e-moves到达的状态。")])])]),t._v(" "),v("li",[v("p",[t._v("不断进行状态更新，知道计算出所有状态对所有输入的关系，即可得到DFA")])])]),t._v(" "),v("h3",{attrs:{id:"table-driven-dfa的实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#table-driven-dfa的实现"}},[t._v("#")]),t._v(" Table-driven: DFA的实现")]),t._v(" "),v("p",[t._v("DFA的概念可以通过二维的表进行实现，")]),t._v(" "),v("p",[t._v("因为DFA所有的节点间关系都可以通过 S1 --a--\x3e S2表示，因此我们可以通过 state-input symbol二维表表示整个DFA， 这个关系可以表示为 Table[S1, a] = S2;")]),t._v(" "),v("p",[t._v("那么接受输入并进行状态切换我们只需要进行一个简单的查表操作即可。十分高效。")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("state = Table[state, sym];\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("h2",{attrs:{id:"对于实现而言的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对于实现而言的问题"}},[t._v("#")]),t._v(" 对于实现而言的问题")]),t._v(" "),v("p",[t._v("emmmm 太数学化了， 仔细考虑下， 其实我对于这个有限状态机的实现最开始的想法就是 "),v("code",[t._v("while-switch")]),t._v("， 其实就是一个简单的abstract machines， 都可以通过while-switch进行实现。")]),t._v(" "),v("p",[t._v("看到一些大佬们的讨论，")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.zhihu.com/question/28121746",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么很多语言的实现里面的 Lexer 都没有使用 DFA？"),v("OutboundLink")],1)]),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.zhihu.com/question/36335124",target:"_blank",rel:"noopener noreferrer"}},[t._v("基于表驱动实现的词法分析的一点疑问？"),v("OutboundLink")],1)]),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.zhihu.com/question/20003971",target:"_blank",rel:"noopener noreferrer"}},[t._v("词法解析具体过程怎样，完全通过正则吗？"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("一个automata的实现形式：")]),t._v(" "),v("ul",[v("li",[t._v("代码位置隐含")]),t._v(" "),v("li",[t._v("Switch-case 控制state变量")]),t._v(" "),v("li",[t._v("table-based")])]),t._v(" "),v("h3",{attrs:{id:"代码位置隐含"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码位置隐含"}},[t._v("#")]),t._v(" 代码位置隐含")]),t._v(" "),v("p",[t._v("这个并没有看到具体的例子，大部分应该是手写出来的， 自己实现出来的，没有显示的state变量，但是由于程序逻辑上仍然是automata的实现思路。")]),t._v(" "),v("h3",{attrs:{id:"switch-case"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#switch-case"}},[t._v("#")]),t._v(" switch-case")]),t._v(" "),v("p",[t._v("应该是最符合直觉的实现，大概样子是")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("state = start_state \nwhile (next =next_input()){\n\tswitch(state){\n\t\t\tcase case_of_state:\n\t\t\t\t\tswitch(next) {\n\t\t\t\t\t\t\tcase case_of_input:\n\t\t\t\t\t\t\t\t\t..transition : state = next_state \n\t\t\t\t\t}\n\t}\n}\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br"),v("span",{staticClass:"line-number"},[t._v("9")]),v("br"),v("span",{staticClass:"line-number"},[t._v("10")]),v("br")])]),v("p",[t._v("最外层是while一致进行读取，")]),t._v(" "),v("p",[t._v("其次是switch分类不同的状态，")]),t._v(" "),v("p",[t._v("然后在不同状态之下， 又一层switch分类此状态接受不同输入后进行的状态变化。")]),t._v(" "),v("h3",{attrs:{id:"table-based"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#table-based"}},[t._v("#")]),t._v(" table-based")]),t._v(" "),v("p",[t._v("其实switch和table是对应的，单层switch完全可以通过一个table进行实现，在汇编层的优化中也经常出现这种情况。")]),t._v(" "),v("p",[t._v("对应上面我们提到的while-switch-switch的形式，对应的table应该是 "),v("code",[t._v("while-table[state][input]")]),t._v("的实现。")]),t._v(" "),v("h3",{attrs:{id:"比较"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[t._v("#")]),t._v(" 比较")]),t._v(" "),v("p",[t._v("三种实现方案的比较。应该是以switch-case最为简单，table-based运行效率可能会高一些，")]),t._v(" "),v("p",[t._v("但是对于某些词法比较简单(cpython  lua)和词法复杂(ruby)的情况，一般都是手写。")])])}),[],!1,null,null,null);a.default=e.exports}}]);
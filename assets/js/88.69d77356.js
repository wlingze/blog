(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{525:function(t,s,a){"use strict";a.r(s);var n=a(31),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ucore-lab4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ucore-lab4"}},[t._v("#")]),t._v(" ucore_lab4")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#理论"}},[t._v("理论")])]),a("li",[a("a",{attrs:{href:"#实验部分"}},[t._v("实验部分")])]),a("li",[a("a",{attrs:{href:"#proc-run-实现"}},[t._v("proc_run实现")]),a("ul",[a("li",[a("a",{attrs:{href:"#被暂停的线程"}},[t._v("被暂停的线程")])]),a("li",[a("a",{attrs:{href:"#切到暂停的线程运行"}},[t._v("切到暂停的线程运行")])]),a("li",[a("a",{attrs:{href:"#切换到新的线程运行"}},[t._v("切换到新的线程运行")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理论"}},[t._v("#")]),t._v(" 理论")]),t._v(" "),a("p",[t._v("这一部分的理论就是线程和进程相关的操作, 这里主要着重内核态线程的实现,")]),t._v(" "),a("p",[t._v("其实也是比较老生常谈的话题了,")]),t._v(" "),a("p",[t._v("具体实现思路其实就是将线程抽象为一个结构体,  以此将线程组织起来,")]),t._v(" "),a("p",[t._v("然后建立合适的检测和线程切换机制,")]),t._v(" "),a("h2",{attrs:{id:"实验部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实验部分"}},[t._v("#")]),t._v(" 实验部分")]),t._v(" "),a("p",[t._v("首先就是实现线程结构体的初始化, 由于线程是指示控制流, 他本身其实不会独占储存空间等, 于是只需要给对应的上下文环境(可以简单理解为寄存器环境和对应的栈空间)即可, 由于要进行对于进程的控制, 增加对应的标识位(pid)\\ 链表指针\\ 运行标识位等等,")]),t._v(" "),a("p",[t._v("初始化的时候, 基本都是简单的赋值为0即可,")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("proc_struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc_proc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("proc_struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("proc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kmalloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("proc_struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PROC_UNINIT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("runs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("kstack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("need_resched "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("mm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        proc->context = {0, 0, 0, 0, 0, 0, 0, 0};")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("tf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("cr3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" boot_cr3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("flags "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" proc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("p",[t._v("然后是"),a("code",[t._v("do_fork")]),t._v("函数,  这里是实际性的设置寄存器和堆空间, 然后将新建的线程加入到"),a("code",[t._v("hash_proc")]),t._v("和"),a("code",[t._v("proc_list")]),t._v("中,")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("do_fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" clone_flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uintptr_t")]),t._v(" stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("trapframe")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("E_NO_FREE_PROC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("proc_struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nr_process "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" MAX_PROCESS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" fork_out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("E_NO_MEM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    proc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc_proc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setup_kstack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" bad_fork_cleanup_proc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy_mm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clone_flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" proc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" bad_fork_cleanup_kstack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy_thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    bool intr_flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("local_intr_save")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("intr_flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_pid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash_proc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("list_add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("proc_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("list_link"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        nr_process"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("local_intr_restore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("intr_flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wakeup_proc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfork_out"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nbad_fork_cleanup_kstack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put_kstack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbad_fork_cleanup_proc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kfree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" fork_out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br")])]),a("h2",{attrs:{id:"proc-run实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proc-run实现"}},[t._v("#")]),t._v(" "),a("code",[t._v("proc_run")]),t._v("实现")]),t._v(" "),a("p",[t._v("这个问题其实是也在问, 线程切换具体的实现, 其实分为两种具体情况,")]),t._v(" "),a("h3",{attrs:{id:"被暂停的线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#被暂停的线程"}},[t._v("#")]),t._v(" 被暂停的线程")]),t._v(" "),a("p",[t._v("在具体的切换实现之前, 我们先从被暂停的线程角度看,")]),t._v(" "),a("blockquote",[a("p",[t._v("在ucore中其实没有设置持续的运行, 只是运行一个init_main以后整个退出了")])]),t._v(" "),a("p",[t._v("ucore在运行时有一个全局变量"),a("code",[t._v("current")]),t._v("在运行, 在循环中检查"),a("code",[t._v("current->need_resched")]),t._v(", 这个标识指示是否要进行切换, 如果是, 则调用"),a("code",[t._v("schedule")]),t._v("函数进行线程切换,")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("schedule")]),t._v("函数中, 遍历"),a("code",[t._v("proc_list")]),t._v("链表, 查找"),a("code",[t._v("proc->state")]),t._v("状态标识为"),a("code",[t._v("PROC_RUNABLE")]),t._v("(就绪态)的进程, 然后经过检测和运行次数标识位的增加, 进入"),a("code",[t._v("proc_run")]),t._v("函数,")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("proc_run")]),t._v("函数中载入新的线程的信息,  esp和cr3两个寄存器的值, 然后进入"),a("code",[t._v("switch_to")]),t._v("函数, 参数为当前和下一个将运行的两个线程的context结构体,")]),t._v(" "),a("p",[a("code",[t._v("switch_to(&(prev->context), &(next->context))")]),t._v(", 这个函数进入switch_to函数, 这是一段汇编写的函数, 代码在"),a("code",[t._v("kern/process/switch.S")]),t._v(",")]),t._v(" "),a("p",[t._v("根据函数调用规则, "),a("code",[t._v("switch_to")]),t._v("运行第一句的时候, 栈内结构如下:")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("---------------------------\n| ret\t(proc_run+100)\n---------------------------\n| arg1\t(&prev->context)\n---------------------------\n| arg2\t(&next->context)\n---------------------------\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("于是我们从"),a("code",[t._v("esp+4")]),t._v("的位置取出arg1(&prev->context), 然后pop, 弹出返回地址复制到context中, 后续类似, 都是进行保存寄存器到"),a("code",[t._v("prev->context")]),t._v("的操作,")]),t._v(" "),a("blockquote",[a("p",[t._v("接下来要拿到arg2, 原本是esp+8的位置, 但是刚pop出去了ret, 因此是esp+8-4 = esp+4,")])]),t._v(" "),a("p",[t._v("然后接下来,从"),a("code",[t._v("esp+4")]),t._v("位置取出arg2(&next->context), 然后向外赋值给寄存器, 也是新的线程上下文恢复, 最后使用"),a("code",[t._v("push+ret")]),t._v("的形式完成eip的赋值,")]),t._v(" "),a("h3",{attrs:{id:"切到暂停的线程运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切到暂停的线程运行"}},[t._v("#")]),t._v(" 切到暂停的线程运行")]),t._v(" "),a("p",[t._v("其实从上述代码中我们已经可以理解一个被暂停的线程如何恢复回来了,")]),t._v(" "),a("p",[t._v("这里仔细提一下如果新的线程是之前被暂停的线程的话, 因为保存的时候保存的eip是switch_to函数的返回地址, 于是直接会回到proc_run函数内, 因为栈和寄存器会全部恢复, 接下来继续运行, 基本全是ret, 一步步回到被暂停转到"),a("code",[t._v("schedule")]),t._v("函数调用的位置,")]),t._v(" "),a("blockquote",[a("p",[t._v("由于ucorelab4的位置还没实现完整的来回暂停切换的操作, 这一部分可以在lab5中更好的观察到,")])]),t._v(" "),a("h3",{attrs:{id:"切换到新的线程运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切换到新的线程运行"}},[t._v("#")]),t._v(" 切换到新的线程运行")]),t._v(" "),a("p",[t._v("这里其实是我们lab4的重点,")]),t._v(" "),a("p",[t._v("新建线程使用的是"),a("code",[t._v("kernel_thread")]),t._v("函数, 在这里会设置对应的tf结构体, tf结构体中其实也有一套保存寄存器的位置, 注意我们线程要运行的起始地址和参数被保存在了tf寄存器中的ebx和edx中, 而tf中的eip指向"),a("code",[t._v("kernel_thread_entry")]),t._v("函数, 然后context中的eip指向"),a("code",[t._v("forkret")]),t._v(" , esp指向tf,")]),t._v(" "),a("p",[t._v("当切换到新线程的时候, eip会运行到forkret位置, 此时栈内为tf结构体, 然后跳转到"),a("code",[t._v("__trapret")]),t._v(", 和中断异常处理一样, 从tf中恢复所有数据, 然后tf中会返回到"),a("code",[t._v("kernel_thread_entry")]),t._v("函数,")]),t._v(" "),a("p",[t._v("这个函数直接压栈edx(参数压栈), 然后"),a("code",[t._v("call ebx")]),t._v("直接调用该线程的起始函数, 返回以后就是调用do_exit函数退出")])])}),[],!1,null,null,null);s.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{485:function(a,t,s){"use strict";s.r(t);var e=s(31),v=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"ucore-lab0-环境搭建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ucore-lab0-环境搭建"}},[a._v("#")]),a._v(" uCore_lab0_环境搭建")]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#基本工具使用"}},[a._v("基本工具使用")]),s("ul",[s("li",[s("a",{attrs:{href:"#gcc编译c文件"}},[a._v("gcc编译c文件")])]),s("li",[s("a",{attrs:{href:"#gcc汇编语法-at-a"}},[a._v("gcc汇编语法-AT&A")])]),s("li",[s("a",{attrs:{href:"#gcc基本内联汇编"}},[a._v("gcc基本内联汇编")])]),s("li",[s("a",{attrs:{href:"#gcc拓展内联汇编"}},[a._v("gcc拓展内联汇编")])])])]),s("li",[s("a",{attrs:{href:"#基本知识"}},[a._v("基本知识")]),s("ul",[s("li",[s("a",{attrs:{href:"#_8086运行模式"}},[a._v("8086运行模式")])]),s("li",[s("a",{attrs:{href:"#_8086内存架构"}},[a._v("8086内存架构")])]),s("li",[s("a",{attrs:{href:"#寄存器"}},[a._v("寄存器")])])])])])]),s("p"),a._v(" "),s("h2",{attrs:{id:"基本工具使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本工具使用"}},[a._v("#")]),a._v(" 基本工具使用")]),a._v(" "),s("h3",{attrs:{id:"gcc编译c文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gcc编译c文件"}},[a._v("#")]),a._v(" gcc编译c文件")]),a._v(" "),s("p",[a._v("gcc编译c语言文件：")]),a._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("gcc -Wall hello.c -o hello\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("编译选项：")]),a._v(" "),s("p",[s("code",[a._v("-o $name")]),a._v("指定编译出的文件文件名，")]),a._v(" "),s("p",[s("code",[a._v("-Wall")]),a._v("开启编译器警告，")]),a._v(" "),s("h3",{attrs:{id:"gcc汇编语法-at-a"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gcc汇编语法-at-a"}},[a._v("#")]),a._v(" gcc汇编语法-AT&A")]),a._v(" "),s("p",[a._v("首先gcc默认汇编语法为"),s("code",[a._v("AT&T")]),a._v("格式，")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("寄存器命名原则\nAT&T: %eax                      Intel: eax")])]),a._v(" "),s("li",[s("p",[a._v("源/目的操作数顺序\nAT&T: movl %eax, %ebx           Intel: mov ebx, eax")])]),a._v(" "),s("li",[s("p",[a._v("常数/立即数的格式　\nAT&T: movl $_value, %ebx        Intel: mov eax, _value\n把value的地址放入eax寄存器\nAT&T: movl $0xd00d, %ebx        Intel: mov ebx, 0xd00d")])]),a._v(" "),s("li",[s("p",[a._v("操作数长度标识\nAT&T: movw %ax, %bx             Intel: mov bx, ax")])]),a._v(" "),s("li",[s("p",[a._v("寻址方式\nAT&T:   immed32(basepointer, indexpointer, indexscale)\nIntel:  [basepointer + indexpointer × indexscale + imm32)")])]),a._v(" "),s("li",[s("p",[a._v("直接寻址\nAT&T:  foo \t\tIntel: [foo]\nboo是一个全局变量。注意加上$是表示地址引用，不加是表示值引用。对于局部变量，可以通过堆栈指针引用。")])]),a._v(" "),s("li",[s("p",[a._v("寄存器间接寻址\nAT&T: (%eax)\t\t Intel: [eax]")])]),a._v(" "),s("li",[s("p",[a._v("变址寻址\nAT&T: _variable(%eax)\nIntel: [eax + _variable]\nAT&T: _array( ,%eax, 4)\nIntel: [eax × 4 + _array]\nAT&T: _array(%ebx, %eax,8)\nIntel: [ebx + eax × 8 + _array]")])])]),a._v(" "),s("h3",{attrs:{id:"gcc基本内联汇编"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gcc基本内联汇编"}},[a._v("#")]),a._v(" gcc基本内联汇编")]),a._v(" "),s("p",[a._v("单行一般使用"),s("code",[a._v("asm asm_qualifiers ( AssembleInstructions );")]),a._v("的形式，")]),a._v(" "),s("p",[a._v("asm_qualifiers为以下两个修饰符：")]),a._v(" "),s("ul",[s("li",[a._v("volatile: 标识编译期不要对asm代码进行优化，")]),a._v(" "),s("li",[a._v("inline: 标识编译器尽可能小的假设asm指令大小")])]),a._v(" "),s("p",[a._v("另外"),s("code",[a._v("asm")]),a._v("并不是标准c语言中的关键字， 在gcc编译器中可以使用"),s("code",[a._v("__asm__")]),a._v(", 后者可以通过-std=c99 等启用 ISO C 的编译选项时的编译，前者不行，")]),a._v(" "),s("p",[a._v("多行一般其中的每一行末尾加"),s("code",[a._v('"\\n\\t"')]),a._v("，")]),a._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("asm")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"pushl %eax\\n\\t"')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"movl $0, %eax\\n\\t"')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"pop %eax"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("另外， 编译器其实并不会处理内联汇编，而是直接把他们插入到编译出的汇编指令中， 然后直接交给汇编器做后面的任务。")]),a._v(" "),s("p",[a._v("编译器不解析 asm 块中的指令的一个推论是：GCC 对我们插入的指令毫不知情。这相当于我们人为地干涉了 GCC 自动的代码生成。")]),a._v(" "),s("h3",{attrs:{id:"gcc拓展内联汇编"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gcc拓展内联汇编"}},[a._v("#")]),a._v(" gcc拓展内联汇编")]),a._v(" "),s("p",[a._v("拓展内联汇编的语法格式大体有下面两种形式，")]),a._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("asm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("asm")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("qualifiers")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" AssemblerTemplate \n                 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" OutputOperands \n                 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" InputOperands\n                 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Clobbers "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("asm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("asm")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("qualifiers")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" AssemblerTemplate \n                      "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" OutputOperands\n                      "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" InputOperands\n                      "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Clobbers\n                      "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" GotoLabels"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("p",[s("code",[a._v("asm")]),a._v(", "),s("code",[a._v("asm-qualifiers")]),a._v("和基本内联汇编基本相同，")]),a._v(" "),s("p",[a._v("基本内联汇编中提供了在汇编中跳转到c标签的能力， "),s("code",[a._v("asm-qualifiers")]),a._v("增加了"),s("code",[a._v("goto")]),a._v("，(只能用于第二种形式)")]),a._v(" "),s("p",[s("code",[a._v("AssemblerTemplate")]),a._v("是程序员编写的汇编指令，")]),a._v(" "),s("p",[a._v("可以将拓展内联汇编asm块看作一个黑盒， 我们给定变量、表达式作为输入，制定变量作为输出，指明我们指令的作用， 运行后这个黑盒会自动按照我们的要求进行处理，")]),a._v(" "),s("p",[s("code",[a._v("OutuputOperrands")]),a._v(" 表示输出变量， 一般在汇编语句中使用"),s("code",[a._v("%0")]),a._v("表示， 在对应的位置使用"),s("code",[a._v(':"=flag"(var)')]),a._v("，")]),a._v(" "),s("p",[s("code",[a._v("InputOperands")]),a._v("表示输入变量， 在汇编语句中使用"),s("code",[a._v("%1")]),a._v("开始递增标识， 在对应的位置使用"),s("code",[a._v(':"flag"(var), "flag"(var2)')]),a._v("通过"),s("code",[a._v("，")]),a._v("分隔多个变量")]),a._v(" "),s("p",[s("code",[a._v("Clobbers")]),a._v("表示副作用(在asm块没有指定但是运行中可能修改的寄存器内存等),对应位置使用"),s("code",[a._v(':"flag1", "flag2"')]),a._v("标识，可能存在多种数据使用"),s("code",[a._v(",")]),a._v("分隔，")]),a._v(" "),s("p",[a._v("flag标识， 主要是约束字母，标识对应含义：")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("字母")]),a._v(" "),s("th",[a._v("含义")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("m, v, o")]),a._v(" "),s("td",[a._v("内存单元")])]),a._v(" "),s("tr",[s("td",[a._v("R")]),a._v(" "),s("td",[a._v("任何通用寄存器")])]),a._v(" "),s("tr",[s("td",[a._v("Q")]),a._v(" "),s("td",[a._v("寄存器eax, ebx, ecx,edx之一")])]),a._v(" "),s("tr",[s("td",[a._v("I, h")]),a._v(" "),s("td",[a._v("直接操作数")])]),a._v(" "),s("tr",[s("td",[a._v("E, F")]),a._v(" "),s("td",[a._v("浮点数")])]),a._v(" "),s("tr",[s("td",[a._v("G")]),a._v(" "),s("td",[a._v("任意")])]),a._v(" "),s("tr",[s("td",[a._v("a, b, c, d")]),a._v(" "),s("td",[a._v("寄存器eax/ax/al, ebx/bx/bl, ecx/cx/cl或edx/dx/dl")])]),a._v(" "),s("tr",[s("td",[a._v("S, D")]),a._v(" "),s("td",[a._v("寄存器esi或edi")])]),a._v(" "),s("tr",[s("td",[a._v("I")]),a._v(" "),s("td",[a._v("常数（0～31）")])])])]),a._v(" "),s("h2",{attrs:{id:"基本知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本知识"}},[a._v("#")]),a._v(" 基本知识")]),a._v(" "),s("h3",{attrs:{id:"_8086运行模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8086运行模式"}},[a._v("#")]),a._v(" 8086运行模式")]),a._v(" "),s("p",[a._v("intel 8086处理器有四种运行模式： 实模式， 保护模式， smm模式， 虚拟8086模式")]),a._v(" "),s("p",[a._v("实模式，")]),a._v(" "),s("p",[a._v("处理器早期使用的简单运行模式， 8086处理器加电后就处于实模式运行，这种状态下软件可以访问的物理空间不超过1m, 程序的代码和数据位于不同的区域， 操作系统和用户程序并没有区别对待。")]),a._v(" "),s("blockquote",[s("p",[a._v("其实这是intel x86向下兼容的需求，对于arm mips等架构结没有实模式，只有类似保护模式的cup模式，")])]),a._v(" "),s("p",[a._v("保护模式：")]),a._v(" "),s("p",[a._v("保护模式的主要目标其实是保证应用程序不能对操作系统进行破坏，")]),a._v(" "),s("p",[a._v("在实模式下初始化控制寄存器(GDTR, LDTR, IDTR, TR)， 和页表， 然后设置CR0寄存器， 进入8086保护模式，")]),a._v(" "),s("p",[a._v("在保护模式下，物理寻址空间可以达到4G， 支持分页机制， 提供了对于虚拟内存的良好支持，保护模式下支持多任务还支持优先级模式，不同的程序可以运行在不同的特权级别，特权级一共分为0-3四个级别，操作系统运行在最高特权0级别上，")]),a._v(" "),s("p",[a._v("这个模式配合良好的检测机制， 可以实现任务间数据的安全共享， 也可以良好的隔离各个任务，")]),a._v(" "),s("h4",{attrs:{id:"内存寻址的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存寻址的区别"}},[a._v("#")]),a._v(" 内存寻址的区别")]),a._v(" "),s("p",[a._v("最主要的区别就是内存寻址的区别,")]),a._v(" "),s("p",[a._v("保护模式下寻址增加到4g, 同时开启分段机制,")]),a._v(" "),s("p",[a._v("实模式下的地址使用 CS:ip的形式, "),s("code",[a._v("(CS << 4) | ip")])]),a._v(" "),s("p",[a._v("保护模式下使用分段机制, "),s("code",[a._v("GDT[CS >> 3] + ip")])]),a._v(" "),s("h3",{attrs:{id:"_8086内存架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8086内存架构"}},[a._v("#")]),a._v(" 8086内存架构")]),a._v(" "),s("p",[a._v("地址是访问内存空间的索引，一般来说内存地址有两个，一个是cpu通过总线访问物理内存用到的物理地址， 一个是我们编写应用程序用到的逻辑地址(虚拟地址)")]),a._v(" "),s("p",[a._v("8086中还有线性地址的概念，这是处理器通过段机制控制形成的地址空间，在操作系统管理下每个运行的程序有相对独立的一个或多个内存空间段，每个段都有各自的起始地址和长度属性，这样实现应用程序的隔离，实现对地址空间的保护。")]),a._v(" "),s("p",[a._v("操作系统会进行对处理器段机制的初始化和配置，(主要是完成虚拟地址和线性地址的映射)，处理器的段管理功能单元负责吧虚拟地址转化成线性地址， 如果不开启页机制，这个线性地址就是物理地址，")]),a._v(" "),s("p",[a._v("段机制主要是解决对程序分散使用内存的支持能力弱， 增加叶机制，每个叶大小是固定的(4k)， 完成对内存单元保护隔离，而且可以有效的支持大量程序分散使用大内存的情况。")]),a._v(" "),s("p",[a._v("上述三种地址的关系如下：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("分段机制启动、分页机制未启动：")]),a._v(" "),s("p",[a._v("逻辑地址---\x3e*"),s("strong",[a._v("段机制处理*")]),a._v("---\x3e线性地址=物理地址")])]),a._v(" "),s("li",[s("p",[a._v("分段机制和分页机制都启动：")]),a._v(" "),s("p",[a._v("逻辑地址---\x3e*"),s("strong",[a._v("段机制处理*")]),a._v("---\x3e线性地址---\x3e*"),s("strong",[a._v("页机制处理*")]),a._v("---\x3e物理地址")])])]),a._v(" "),s("ul",[s("li",[a._v("段机制处理")])]),a._v(" "),s("p",[a._v("分段地址转换，逻辑地址(段选择子selector和段偏移offset组成)， 段选择子内容作为段描述符表的索引，找到表中对应的段描述符， 然后把段描述符中保存的段基址加上段偏移， 形成线性地址，")]),a._v(" "),s("blockquote",[s("p",[a._v("这里前提是保护模式，并注意需要建立段描述符和段描述符表。")])]),a._v(" "),s("h3",{attrs:{id:"寄存器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#寄存器"}},[a._v("#")]),a._v(" 寄存器")]),a._v(" "),s("p",[a._v("通用寄存器： eax, ebx, ecx, edx, esi, edi, esp, ebp,")]),a._v(" "),s("p",[a._v("段寄存器：cs(code segment), ds(data segment), es(extra segment), ss(stack segment), fs, gs,")]),a._v(" "),s("p",[a._v("指令寄存器, eip，保存的是下一条要执行指令的内存地址，在分段地址转换中表示指令的段内偏移地址，")]),a._v(" "),s("p",[a._v("标识寄存器， efalgs,")]),a._v(" "),s("p",[a._v("另外是cr0等不能被访问的控制寄存器，")])])}),[],!1,null,null,null);t.default=v.exports}}]);